import svgwrite
import math

def factorial(n: int) -> int:
  if n == 0:
    return 1
  return n * factorial(n-1)

# Gets the next node in the sequence of a greedy algorithm
# s is the current node, n is the total length of permutation,
#  i is the current iteration
def get_transformation(s: str, n: int, i: int) -> str:
  if i == 0:
    return s
  for k in range(2, n+1):
    if i % (factorial(n) / factorial(k)) == 0:
      return s[-(k-1):] + s[:-(k-1)][::-1]

# Determines a node ordering based on a greedy algorithm
# Returns a dict from nodes to image indexes
def get_canonical_ordering(n: int) -> dict:
  s = "".join(list(map(str, [j for j in range(1, n+1)])))
  result = dict()

  for i in range(factorial(n)):
    index = tuple([i // (factorial(n) // factorial(j)) % j for j in range(2, n+1)])
    s = get_transformation(s, n, i)
    result.update({s: index})

  return result

# Breaks a superpermutation ordering into graph segments
def get_segments(n: int, ordering: str, mapping: dict) -> list:
  node = ordering[:n]
  cur = n+1
  dist = 1

  segments = []
  while cur <= len(ordering):
    next_node = ordering[cur-n:cur]
    if next_node in mapping:
      segments.append((node, next_node, dist))
      node = next_node
      dist = 0
    dist += 1
    cur += 1
  return segments

# Maps an integer value to a color
def get_color(value: int) -> str:
  colors = ["white", "red", "green", "blue", "orange", "purple", "brown", "black"]
  return colors[value % len(colors)]


# Recursively draw circles, inside of parent circles
# Store smallest circles drawn at max depth
def draw_recursive_circles(dwg, center: tuple, R: float, depth: int, max_depth: int, index: tuple, circle_dict: dict):
  if depth > max_depth:
    return

  n = depth  # Number of inner circles
  if n < 2:
    return
  
  # Compute the optimal radius for inner circles to fit without overlap
  r = R / (1 + (1 / math.sin(math.pi / n)))
  
  # Compute the radius of the imaginary circle on which centers lie
  center_radius = R - r  

  # Place `n` circles inside the parent circle
  for i in range(n):
    angle = 2 * math.pi * i / n
    new_x = center[0] + center_radius * math.cos(angle)
    new_y = center[1] + center_radius * math.sin(angle)
    new_center = (new_x, new_y)

    # Draw the child circle
    dwg.add(dwg.circle(center=new_center, r=r, fill="none", stroke="black"))

    # If this is the last depth level, store it
    new_index = index + (i,)
    if depth == max_depth:
      circle_dict[new_index] = {"center": new_center, "radius": r}

    # Recursively draw smaller circles
    draw_recursive_circles(dwg, new_center, r, depth + 1, max_depth, new_index, circle_dict)

# Generate an SVG with a recursive circle pattern
# Adds labels for nodes and draws a graph of the provided superpermutation
# Ensure that provided n matches the provided ordering
def generate_svg(n: int, filename="recursive_circles.svg", ordering=""):
  size = 4000  # Canvas size
  dwg = svgwrite.Drawing(filename, size=(size, size))

  # Add a white background
  dwg.add(dwg.rect(insert=(0, 0), size=(size, size), fill="white"))

  center = (size / 2, size / 2)
  initial_radius = size / 2.1

  # Dictionary to store the smallest circles, indexed by hierarchy tuple
  circle_dict = {}

  # Start recursive drawing
  draw_recursive_circles(dwg, center, initial_radius, 2, n, (), circle_dict)

  # Dictionary to map the indexes of the drawn circleus to the ordering of the greedy selection algorithm
  mapping = get_canonical_ordering(n)

  # Show the corresponding permutation inside the circle
  for s, index in mapping.items():
    dwg.add(dwg.text(
      str(s),
      insert=circle_dict[index]['center'], 
      text_anchor="middle",  
      alignment_baseline="middle",  
      font_size=12,
      fill="black"
    ))

  # Draw lines between the circles for adjecent permutations in the ordering
  if ordering != "":
    segments = get_segments(n, ordering, mapping)
    for start, dest, weight in segments:

      center1 = circle_dict[mapping[start]]["center"]
      center2 = circle_dict[mapping[dest]]["center"]
      color = get_color(weight)

      dwg.add(dwg.line(start=center1, end=center2, stroke=color, stroke_width=5))

  # Draw all nontrivial weight 2 edges in the graph
  # for perm in mapping:
  #   dist_2 = perm[2:] + perm[:2][::-1]

  #   center1 = circle_dict[mapping[perm]]["center"]
  #   center2 = circle_dict[mapping[dist_2]]["center"]
  #   color = get_color(2)  # Get color based on value
  #   dwg.add(dwg.line(start=center1, end=center2, stroke=color, stroke_width=5))

  dwg.save()
  print(f"SVG saved as {filename}")

  return

def main():
  # All 8 minimal superpermutations of length 153 on 5 symbols
  # Found by Ben Chaffin in March 2014
  optimal_5_orderings = [
    "123451234152341253412354123145231425314235142315423124531243512431524312543121345213425134215342135421324513241532413524132541321453214352143251432154321",
    "123451234152341253412354123145231425314235142315423124531243512431524312543121354213524135214352134521325413251432513425132451321543215342153241532145321",
    "123451234152341253412354123145231425314235142315421352413521435213452135421534215432154231245321453241532451325413251432513425132453124351243152431254312",
    "123451234152341253412354123145213425134215342135421345214352145321452314253142351423154231245312435124315243125432154325143254132451324153241352413254312",
    "123451234152341253412354132541352413542134521342513421534213541231452314253142351423154231245321435214325143215432145324153245132453124351243152431254312",
    "123451234152341253412354132514325134251324513254135241354213541231452134521435214532154321534215324153214523142531423514231542312453124351243152431254312",
    "123451324513425134521354213524135214352134512341523412534123541231452314253142351423154231245312435124315243125432153421532415321453215432514325413254312",
    "123451324153241352413254132451342513452134512341523412534123541231452314253142351423154213542153421543214532143521432514321542312453124351243152431254312"
  ]

  for i in range(8):
    generate_svg(5, filename="superperm_5_" + str(i) +".svg", ordering=optimal_5_orderings[i])

  # Optimal solution for n=7
  ordering
  generate_svg(7, filename="superperm_7.svg", ordering=ordering_7)

main()